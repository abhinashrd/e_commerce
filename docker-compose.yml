version: "3.8"

services:
  db:
    image: postgres:16
    container_name: ecom_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01-init_root.sql:ro
      - ./services/db/init.sql:/docker-entrypoint-initdb.d/02-init_services.sql:ro
    ports:
      - "5432:5432"
    networks:
      - backend

  usersvc:
    build: ./services/usersvc
    container_name: usersvc
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=usersdb
    ports:
      - "8080:8081"
    networks:
      - backend
      - monitoring

  productsvc:
    build: ./services/productsvc
    container_name: productsvc
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=productsdb
    ports:
      - "8082:8081"
    networks:
      - backend
      - monitoring

  ordersvc:
    build: ./services/ordersvc
    container_name: ordersvc
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=ordersdb
    ports:
      - "8083:8081"
    networks:
      - backend
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yaml:/etc/prometheus/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
  monitoring:
    driver: bridge